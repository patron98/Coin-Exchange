{"version":3,"sources":["components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/AccountBalance/AccountBalance.jsx","components/ExchangeHeader/logo.svg","components/ExchangeHeader/ExchangeHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","Section","section","Button","button","AccountBalance","buttonText","content","amount","handleBalanceVisibilityChange","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","formatPrice","parseFloat","Number","toFixed","Div","div","App","React","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","className","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92028d2a.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td` \n    border: 1px solid #cccccc;\n    width: 25vh\n    \n    `;\n\nexport default function Coin(props){\n  \n    const handleClick = (event) => {\n        event.preventDefault();\n        props.handleRefresh(props.tickerId);\n}\n\n    \n        return (\n            <tr>\n                <Td>{props.name}</Td>\n                <Td>{props.ticker}</Td>\n                <Td>${props.price}</Td>\n                {props.showBalance ? <Td>{props.balance}</Td> : null}\n                <Td>\n                    <form action=\"#\" method=\"POST\">\n                    <button onClick={handleClick}>Refresh</button>\n                    </form>\n                    \n                </Td>\n            </tr>\n        );\n    \n}\n\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n    margin: 20px auto 230px auto;\n    display: inline-block;\n    font-size: 1.0rem;\n  \n`;\n\nexport default function CoinList(props){\n    return (\n        <Table>\n    <thead>\n        <tr>\n          <th>Name</th>\n          <th>Ticker</th>\n          <th>Price</th>\n          {props.showBalance ? <th>Balance</th> : null }\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {\n          props.coinData.map( ({key, name, ticker, price, balance}) => \n          <Coin key={key} \n          handleRefresh={props.handleRefresh} \n          name={name} \n          ticker={ticker} \n          showBalance={props.showBalance}\n          balance={balance}\n          price={price} \n          tickerId={key}/> \n          )\n        }\n      </tbody> \n    </Table>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\nborder: 3px black groove;\nwidth: 30%;\nmargin: 10px auto;\npadding 5px 5px;\n`;\n \nconst Button = styled.button`\nborder: 1px black solid;\ncolor: green;\nbackground-color: #cccccc\n`;\n \nexport default function AccountBalance (props) {\n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show balance';\n    let content = null;\n    if ( props.showBalance ) {\n        content = <>Balance: ${props.amount}</>;\n    }\n\n    return (\n        <Section>  \n            {content}\n            <Button onClick={props.handleBalanceVisibilityChange}>{buttonText}</Button>\n        </Section>        \n    );\n}\n\n\n\n/*AccountBalance.propTypes = {\n    name: PropTypes.number.isRequired,\n}\n*/","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\nconst Img = styled.img`\nheight: 20vmin;\npointer-events: none;\n`;\n \nconst Header = styled.header`\nbackground-color: #282c34;\nmin-height: 20vh;\ndisplay: flex;\nflex-direction: row;\nalign-items: center;\njustify-content: center;\ncolor: white;\n`;\n\nconst H1 = styled.h1`\nfont-size: 2rem;\n`;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n                <Img src={logo} alt=\"React logo\"/>\n                <H1>\n                    Coin Exchange\n                </H1>\n            </Header>\n        )\n    }\n}\n","import React, { useEffect } from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport Exchangeheader from './components/ExchangeHeader/ExchangeHeader';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nconst Div = styled.div`\n  text-align: center;\n  background-color: grey;\n  color: #cccccc;\n  font-size: 20px;\n  font: sans-serif;\n`;\n\n \nfunction App (props) {\n \n  const [balance, setBalance ] = React.useState(10000);\n  const [showBalance, setShowBalance] = React.useState(true);\n  const [coinData, setCoinData] = React.useState([]);\n\n  const componentDidMount = async () => {\n        const response = await axios.get('https://api.coinpaprika.com/v1/coins')\n        const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n        const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n        const promises = coinIds.map(id => axios.get(tickerUrl + id));\n        const coinData = await Promise.all(promises);\n        const coinPriceData = coinData.map(function(response) {\n          const coin = response.data;\n          return {\n            key: coin.id,\n            name: coin.name,\n            ticker: coin.symbol,\n            balance: 0,\n            price: formatPrice(coin.quotes.USD.price)\n          };\n        })\n        setCoinData(coinPriceData);     \n      }\n\n  useEffect (function(){\n    if (coinData.length === 0){\n      componentDidMount();\n    }\n  });\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(function(values){\n      let newValues = { ...values };\n      if( valueChangeId === values.key ) {\n      newValues.price = newPrice;\n      }\n    return newValues;\n  });\n  setCoinData(newCoinData);\n}\n  \n    return (\n      <Div className=\"App\">\n        <Exchangeheader />\n        <AccountBalance \n        amount={balance}\n        showBalance={showBalance}\n        handleBalanceVisibilityChange={handleBalanceVisibilityChange}/>\n        <CoinList \n        coinData={coinData} \n        showBalance={showBalance}\n        handleRefresh={handleRefresh} />\n      </Div>\n    );\n  \n}\n  \n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}